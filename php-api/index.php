<?php
require __DIR__ . '/vendor/autoload.php';
use DI\Container; use Slim\Factory\AppFactory; use Psr\Http\Message\ResponseInterface as Response; use Psr\Http\Message\ServerRequestInterface as Request;
$container=new Container(); $container->set('db',function(){ $pdo=new PDO('pgsql:host=localhost;port=5432;dbname=leadsdb;','leads','leads',[PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION]); $pdo->exec("CREATE TABLE IF NOT EXISTS leads (id SERIAL PRIMARY KEY,name TEXT,email TEXT,phone TEXT,company TEXT,source TEXT,notes TEXT,created_at TIMESTAMPTZ DEFAULT NOW());"); return $pdo; });
AppFactory::setContainer($container); $app=AppFactory::create();
$app->add(function(Request $req,$handler){ $path=$req->getUri()->getPath(); if(str_starts_with($path,'/health')) return $handler->handle($req); $auth=$req->getHeaderLine('Authorization'); $expected=getenv('API_TOKEN')?:'secret123'; if(!str_starts_with($auth,'Bearer ') || substr($auth,7)!==$expected){ $r=new Slim\Psr7\Response(401); $r->getBody()->write(json_encode(['error'=>'Unauthorized'])); return $r->withHeader('Content-Type','application/json'); } return $handler->handle($req); });
$app->get('/health',fn($req,$res)=>$res->withStatus(200));
$app->get('/leads',function(Request $req,Response $res){ $db=$this->get('db'); $p=$req->getQueryParams(); if(isset($p['start'])&&isset($p['end'])){ $s=$db->prepare("SELECT * FROM leads WHERE created_at BETWEEN :s AND :e ORDER BY created_at DESC"); $s->execute([':s'=>$p['start'],':e'=>$p['end']]); } else { $s=$db->query("SELECT * FROM leads ORDER BY created_at DESC"); } $rows=$s->fetchAll(PDO::FETCH_ASSOC); $res->getBody()->write(json_encode($rows)); return $res->withHeader('Content-Type','application/json'); });
$app->get('/leads/{id}',function(Request $req,Response $res,array $args){ $db=$this->get('db'); $s=$db->prepare("SELECT * FROM leads WHERE id=:id"); $s->execute([':id'=>$args['id']]); $row=$s->fetch(PDO::FETCH_ASSOC); if(!$row) return $res->withStatus(404); $res->getBody()->write(json_encode($row)); return $res->withHeader('Content-Type','application/json'); });
$app->post('/leads',function(Request $req,Response $res){ $db=$this->get('db'); $data=json_decode($req->getBody()->getContents(),true); if(!isset($data['name'])||trim($data['name'])===''){ $res->getBody()->write(json_encode(['error'=>'Name required'])); return $res->withStatus(400)->withHeader('Content-Type','application/json'); } $s=$db->prepare("INSERT INTO leads(name,email,phone,company,source,notes) VALUES(:name,:email,:phone,:company,:source,:notes) RETURNING *"); $s->execute([':name'=>$data['name']??null,':email'=>$data['email']??null,':phone'=>$data['phone']??null,':company'=>$data['company']??null,':source'=>$data['source']??null,':notes'=>$data['notes']??null]); $row=$s->fetch(PDO::FETCH_ASSOC); $res->getBody()->write(json_encode($row)); return $res->withHeader('Content-Type','application/json'); });
$app->put('/leads/{id}',function(Request $req,Response $res,array $args){ $db=$this->get('db'); $data=json_decode($req->getBody()->getContents(),true); $s=$db->prepare("UPDATE leads SET name=:name,email=:email,phone=:phone,company=:company,source=:source,notes=:notes WHERE id=:id RETURNING *"); $s->execute([':name'=>$data['name']??null,':email'=>$data['email']??null,':phone'=>$data['phone']??null,':company'=>$data['company']??null,':source'=>$data['source']??null,':notes'=>$data['notes']??null,':id'=>$args['id']]); $row=$s->fetch(PDO::FETCH_ASSOC); if(!$row) return $res->withStatus(404); $res->getBody()->write(json_encode($row)); return $res->withHeader('Content-Type','application/json'); });
$app->delete('/leads/{id}',function(Request $req,Response $res,array $args){ $db=$this->get('db'); $s=$db->prepare("DELETE FROM leads WHERE id=:id"); $s->execute([':id'=>$args['id']]); return $res->withStatus(200); });
$app->run();